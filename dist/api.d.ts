/**
 * Pickly Post Service
 * Post Service API Specs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface GenericError
 */
export interface GenericError {
    /**
     *
     * @type {Array<string>}
     * @memberof GenericError
     */
    message?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof GenericError
     */
    status_code?: number;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse200
     */
    postsCount?: number;
    /**
     *
     * @type {Array<SinglePostResponse>}
     * @memberof InlineResponse200
     */
    posts?: Array<SinglePostResponse>;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2001
     */
    status?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2002
     */
    votes_count?: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2002
     */
    optionId?: string;
}
/**
 *
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse201
     */
    id: string;
}
/**
 *
 * @export
 * @interface InlineResponse2011
 */
export interface InlineResponse2011 {
    /**
     *
     * @type {Array<InlineResponse2011Groups>}
     * @memberof InlineResponse2011
     */
    groups: Array<InlineResponse2011Groups>;
}
/**
 *
 * @export
 * @interface InlineResponse2011Groups
 */
export interface InlineResponse2011Groups {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2011Groups
     */
    id?: string;
    /**
     *
     * @type {Array<InlineResponse2011Options>}
     * @memberof InlineResponse2011Groups
     */
    options?: Array<InlineResponse2011Options>;
}
/**
 *
 * @export
 * @interface InlineResponse2011Options
 */
export interface InlineResponse2011Options {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2011Options
     */
    id: string;
}
/**
 *
 * @export
 * @interface OptionsCreationRequest
 */
export interface OptionsCreationRequest {
    /**
     *
     * @type {string}
     * @memberof OptionsCreationRequest
     */
    body: string;
}
/**
 *
 * @export
 * @interface OptionsCreationResponse
 */
export interface OptionsCreationResponse {
    /**
     *
     * @type {string}
     * @memberof OptionsCreationResponse
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof OptionsCreationResponse
     */
    body?: string;
    /**
     *
     * @type {Array<OptionsGroupCreationResponseImageUrl>}
     * @memberof OptionsCreationResponse
     */
    image_url?: Array<OptionsGroupCreationResponseImageUrl>;
}
/**
 *
 * @export
 * @interface OptionsGroupCreation
 */
export interface OptionsGroupCreation {
    /**
     *
     * @type {Array<OptionsGroupCreationRequest>}
     * @memberof OptionsGroupCreation
     */
    groups: Array<OptionsGroupCreationRequest>;
}
/**
 *
 * @export
 * @interface OptionsGroupCreationRequest
 */
export interface OptionsGroupCreationRequest {
    /**
     *
     * @type {string}
     * @memberof OptionsGroupCreationRequest
     */
    name: string;
    /**
     *
     * @type {Array<OptionsCreationRequest>}
     * @memberof OptionsGroupCreationRequest
     */
    options: Array<OptionsCreationRequest>;
}
/**
 *
 * @export
 * @interface OptionsGroupCreationResponse
 */
export interface OptionsGroupCreationResponse {
    /**
     *
     * @type {string}
     * @memberof OptionsGroupCreationResponse
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof OptionsGroupCreationResponse
     */
    name?: string;
    /**
     *
     * @type {Array<OptionsGroupCreationResponseImageUrl>}
     * @memberof OptionsGroupCreationResponse
     */
    image_url?: Array<OptionsGroupCreationResponseImageUrl>;
    /**
     *
     * @type {Array<OptionsCreationResponse>}
     * @memberof OptionsGroupCreationResponse
     */
    options: Array<OptionsCreationResponse>;
}
/**
 *
 * @export
 * @interface OptionsGroupCreationResponseImageUrl
 */
export interface OptionsGroupCreationResponseImageUrl {
    /**
     *
     * @type {string}
     * @memberof OptionsGroupCreationResponseImageUrl
     */
    url: string;
}
/**
 *
 * @export
 * @interface PostCreationRequest
 */
export interface PostCreationRequest {
    /**
     *
     * @type {string}
     * @memberof PostCreationRequest
     */
    caption?: string;
    /**
     *
     * @type {boolean}
     * @memberof PostCreationRequest
     */
    is_hidden: boolean;
    /**
     *
     * @type {string}
     * @memberof PostCreationRequest
     */
    type: PostCreationRequestTypeEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum PostCreationRequestTypeEnum {
    TextPoll = "text poll",
    ImagePoll = "image poll",
    MiniSurvey = "mini survey"
}
/**
 *
 * @export
 * @interface PostFinishedFlagRequest
 */
export interface PostFinishedFlagRequest {
    /**
     *
     * @type {boolean}
     * @memberof PostFinishedFlagRequest
     */
    finished: boolean;
}
/**
 *
 * @export
 * @interface SinglePostResponse
 */
export interface SinglePostResponse {
    /**
     *
     * @type {SinglePostResponseUser}
     * @memberof SinglePostResponse
     */
    user?: SinglePostResponseUser;
    /**
     *
     * @type {string}
     * @memberof SinglePostResponse
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof SinglePostResponse
     */
    caption?: string;
    /**
     *
     * @type {boolean}
     * @memberof SinglePostResponse
     */
    is_hidden: boolean;
    /**
     *
     * @type {string}
     * @memberof SinglePostResponse
     */
    created_at: string;
    /**
     *
     * @type {string}
     * @memberof SinglePostResponse
     */
    type: SinglePostResponseTypeEnum;
    /**
     *
     * @type {Array<OptionsGroupCreationResponseImageUrl>}
     * @memberof SinglePostResponse
     */
    image_url?: Array<OptionsGroupCreationResponseImageUrl>;
    /**
     *
     * @type {SinglePostResponseOptionsGroups}
     * @memberof SinglePostResponse
     */
    options_groups: SinglePostResponseOptionsGroups;
}
/**
    * @export
    * @enum {string}
    */
export declare enum SinglePostResponseTypeEnum {
    TextPoll = "text poll",
    ImagePoll = "image poll",
    MiniSurvey = "mini_survey"
}
/**
 *
 * @export
 * @interface SinglePostResponseOptionsGroups
 */
export interface SinglePostResponseOptionsGroups {
    /**
     *
     * @type {Array<OptionsGroupCreationResponse>}
     * @memberof SinglePostResponseOptionsGroups
     */
    groups: Array<OptionsGroupCreationResponse>;
}
/**
 *
 * @export
 * @interface SinglePostResponseUser
 */
export interface SinglePostResponseUser {
    /**
     *
     * @type {string}
     * @memberof SinglePostResponseUser
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SinglePostResponseUser
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SinglePostResponseUser
     */
    profile_pic?: string;
}
/**
 * MediaApi - axios parameter creator
 * @export
 */
export declare const MediaApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Add the media data related to a post
     * @param {any} file
     * @param {string} entityType
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadOneMedia: (file: any, entityType: string, entityId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * MediaApi - functional programming interface
 * @export
 */
export declare const MediaApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Add the media data related to a post
     * @param {any} file
     * @param {string} entityType
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadOneMedia(file: any, entityType: string, entityId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2001>>;
};
/**
 * MediaApi - factory interface
 * @export
 */
export declare const MediaApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Add the media data related to a post
     * @param {any} file
     * @param {string} entityType
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadOneMedia(file: any, entityType: string, entityId: string, options?: any): AxiosPromise<InlineResponse2001>;
};
/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export declare class MediaApi extends BaseAPI {
    /**
     *
     * @summary Add the media data related to a post
     * @param {any} file
     * @param {string} entityType
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    uploadOneMedia(file: any, entityType: string, entityId: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2001>>;
}
/**
 * PostsApi - axios parameter creator
 * @export
 */
export declare const PostsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary add option group to post
     * @param {string} postid id of post needed
     * @param {OptionsGroupCreation} optionsGroupCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOptionsGroup: (postid: string, optionsGroupCreation: OptionsGroupCreation, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new post
     * @param {PostCreationRequest} postCreationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPost: (postCreationRequest: PostCreationRequest, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete one post
     * @param {string} postid id of post needed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOnePost: (postid: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary patch post
     * @param {string} postid id of post needed
     * @param {PostFinishedFlagRequest} postFinishedFlagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flagPostAsFinished: (postid: string, postFinishedFlagRequest: PostFinishedFlagRequest, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get single post
     * @param {string} postid id of post needed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOnePost: (postid: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get posts
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts: (offset?: number | undefined, limit?: number | undefined, options?: any) => Promise<RequestArgs>;
};
/**
 * PostsApi - functional programming interface
 * @export
 */
export declare const PostsApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary add option group to post
     * @param {string} postid id of post needed
     * @param {OptionsGroupCreation} optionsGroupCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOptionsGroup(postid: string, optionsGroupCreation: OptionsGroupCreation, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2011>>;
    /**
     *
     * @summary Create a new post
     * @param {PostCreationRequest} postCreationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPost(postCreationRequest: PostCreationRequest, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse201>>;
    /**
     *
     * @summary Delete one post
     * @param {string} postid id of post needed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOnePost(postid: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     *
     * @summary patch post
     * @param {string} postid id of post needed
     * @param {PostFinishedFlagRequest} postFinishedFlagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flagPostAsFinished(postid: string, postFinishedFlagRequest: PostFinishedFlagRequest, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     *
     * @summary Get single post
     * @param {string} postid id of post needed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOnePost(postid: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SinglePostResponse>>;
    /**
     *
     * @summary Get posts
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts(offset?: number | undefined, limit?: number | undefined, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse200>>;
};
/**
 * PostsApi - factory interface
 * @export
 */
export declare const PostsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary add option group to post
     * @param {string} postid id of post needed
     * @param {OptionsGroupCreation} optionsGroupCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOptionsGroup(postid: string, optionsGroupCreation: OptionsGroupCreation, options?: any): AxiosPromise<InlineResponse2011>;
    /**
     *
     * @summary Create a new post
     * @param {PostCreationRequest} postCreationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPost(postCreationRequest: PostCreationRequest, options?: any): AxiosPromise<InlineResponse201>;
    /**
     *
     * @summary Delete one post
     * @param {string} postid id of post needed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOnePost(postid: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary patch post
     * @param {string} postid id of post needed
     * @param {PostFinishedFlagRequest} postFinishedFlagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    flagPostAsFinished(postid: string, postFinishedFlagRequest: PostFinishedFlagRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get single post
     * @param {string} postid id of post needed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOnePost(postid: string, options?: any): AxiosPromise<SinglePostResponse>;
    /**
     *
     * @summary Get posts
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts(offset?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<InlineResponse200>;
};
/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export declare class PostsApi extends BaseAPI {
    /**
     *
     * @summary add option group to post
     * @param {string} postid id of post needed
     * @param {OptionsGroupCreation} optionsGroupCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    createOptionsGroup(postid: string, optionsGroupCreation: OptionsGroupCreation, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2011>>;
    /**
     *
     * @summary Create a new post
     * @param {PostCreationRequest} postCreationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    createPost(postCreationRequest: PostCreationRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse201>>;
    /**
     *
     * @summary Delete one post
     * @param {string} postid id of post needed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    deleteOnePost(postid: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary patch post
     * @param {string} postid id of post needed
     * @param {PostFinishedFlagRequest} postFinishedFlagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    flagPostAsFinished(postid: string, postFinishedFlagRequest: PostFinishedFlagRequest, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Get single post
     * @param {string} postid id of post needed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    getOnePost(postid: string, options?: any): Promise<import("axios").AxiosResponse<SinglePostResponse>>;
    /**
     *
     * @summary Get posts
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    getPosts(offset?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<InlineResponse200>>;
}
/**
 * VotesApi - axios parameter creator
 * @export
 */
export declare const VotesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Add vote
     * @param {string} optionid id of option
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addVote: (optionid: string, options?: any) => Promise<RequestArgs>;
};
/**
 * VotesApi - functional programming interface
 * @export
 */
export declare const VotesApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Add vote
     * @param {string} optionid id of option
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addVote(optionid: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<InlineResponse2002>>>;
};
/**
 * VotesApi - factory interface
 * @export
 */
export declare const VotesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Add vote
     * @param {string} optionid id of option
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addVote(optionid: string, options?: any): AxiosPromise<Array<InlineResponse2002>>;
};
/**
 * VotesApi - object-oriented interface
 * @export
 * @class VotesApi
 * @extends {BaseAPI}
 */
export declare class VotesApi extends BaseAPI {
    /**
     *
     * @summary Add vote
     * @param {string} optionid id of option
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VotesApi
     */
    addVote(optionid: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2002[]>>;
}
