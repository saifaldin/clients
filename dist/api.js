"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pickly Post Service
 * Post Service API Specs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.VotesApi = exports.VotesApiFactory = exports.VotesApiFp = exports.VotesApiAxiosParamCreator = exports.PostsApi = exports.PostsApiFactory = exports.PostsApiFp = exports.PostsApiAxiosParamCreator = exports.MediaApi = exports.MediaApiFactory = exports.MediaApiFp = exports.MediaApiAxiosParamCreator = exports.SinglePostResponseTypeEnum = exports.PostCreationRequestTypeEnum = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var PostCreationRequestTypeEnum;
(function (PostCreationRequestTypeEnum) {
    PostCreationRequestTypeEnum["TextPoll"] = "text poll";
    PostCreationRequestTypeEnum["ImagePoll"] = "image poll";
    PostCreationRequestTypeEnum["MiniSurvey"] = "mini survey";
})(PostCreationRequestTypeEnum = exports.PostCreationRequestTypeEnum || (exports.PostCreationRequestTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SinglePostResponseTypeEnum;
(function (SinglePostResponseTypeEnum) {
    SinglePostResponseTypeEnum["TextPoll"] = "text poll";
    SinglePostResponseTypeEnum["ImagePoll"] = "image poll";
    SinglePostResponseTypeEnum["MiniSurvey"] = "mini_survey";
})(SinglePostResponseTypeEnum = exports.SinglePostResponseTypeEnum || (exports.SinglePostResponseTypeEnum = {}));
/**
 * MediaApi - axios parameter creator
 * @export
 */
var MediaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add the media data related to a post
         * @param {any} file
         * @param {string} entityType
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadOneMedia: function (file, entityType, entityId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'file' is not null or undefined
                    common_1.assertParamExists('uploadOneMedia', 'file', file);
                    // verify required parameter 'entityType' is not null or undefined
                    common_1.assertParamExists('uploadOneMedia', 'entityType', entityType);
                    // verify required parameter 'entityId' is not null or undefined
                    common_1.assertParamExists('uploadOneMedia', 'entityId', entityId);
                    localVarPath = "/media";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                    if (file !== undefined) {
                        localVarFormParams.append('file', file);
                    }
                    if (entityType !== undefined) {
                        localVarFormParams.append('entity_type', entityType);
                    }
                    if (entityId !== undefined) {
                        localVarFormParams.append('entity_id', new Blob([JSON.stringify(entityId)], { type: "application/json" }));
                    }
                    localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = localVarFormParams;
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        }
    };
};
exports.MediaApiAxiosParamCreator = MediaApiAxiosParamCreator;
/**
 * MediaApi - functional programming interface
 * @export
 */
var MediaApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.MediaApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add the media data related to a post
         * @param {any} file
         * @param {string} entityType
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadOneMedia: function (file, entityType, entityId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.uploadOneMedia(file, entityType, entityId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.MediaApiFp = MediaApiFp;
/**
 * MediaApi - factory interface
 * @export
 */
var MediaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.MediaApiFp(configuration);
    return {
        /**
         *
         * @summary Add the media data related to a post
         * @param {any} file
         * @param {string} entityType
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadOneMedia: function (file, entityType, entityId, options) {
            return localVarFp.uploadOneMedia(file, entityType, entityId, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.MediaApiFactory = MediaApiFactory;
/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
var MediaApi = /** @class */ (function (_super) {
    __extends(MediaApi, _super);
    function MediaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add the media data related to a post
     * @param {any} file
     * @param {string} entityType
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    MediaApi.prototype.uploadOneMedia = function (file, entityType, entityId, options) {
        var _this = this;
        return exports.MediaApiFp(this.configuration).uploadOneMedia(file, entityType, entityId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MediaApi;
}(base_1.BaseAPI));
exports.MediaApi = MediaApi;
/**
 * PostsApi - axios parameter creator
 * @export
 */
var PostsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary add option group to post
         * @param {string} postid id of post needed
         * @param {OptionsGroupCreation} optionsGroupCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOptionsGroup: function (postid, optionsGroupCreation, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'postid' is not null or undefined
                    common_1.assertParamExists('createOptionsGroup', 'postid', postid);
                    // verify required parameter 'optionsGroupCreation' is not null or undefined
                    common_1.assertParamExists('createOptionsGroup', 'optionsGroupCreation', optionsGroupCreation);
                    localVarPath = "/posts/{postid}/groups"
                        .replace("{" + "postid" + "}", encodeURIComponent(String(postid)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(optionsGroupCreation, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         *
         * @summary Create a new post
         * @param {PostCreationRequest} postCreationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: function (postCreationRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'postCreationRequest' is not null or undefined
                    common_1.assertParamExists('createPost', 'postCreationRequest', postCreationRequest);
                    localVarPath = "/posts";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(postCreationRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         *
         * @summary Delete one post
         * @param {string} postid id of post needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOnePost: function (postid, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'postid' is not null or undefined
                    common_1.assertParamExists('deleteOnePost', 'postid', postid);
                    localVarPath = "/posts/{postid}"
                        .replace("{" + "postid" + "}", encodeURIComponent(String(postid)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         *
         * @summary patch post
         * @param {string} postid id of post needed
         * @param {PostFinishedFlagRequest} postFinishedFlagRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagPostAsFinished: function (postid, postFinishedFlagRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'postid' is not null or undefined
                    common_1.assertParamExists('flagPostAsFinished', 'postid', postid);
                    // verify required parameter 'postFinishedFlagRequest' is not null or undefined
                    common_1.assertParamExists('flagPostAsFinished', 'postFinishedFlagRequest', postFinishedFlagRequest);
                    localVarPath = "/posts/{postid}"
                        .replace("{" + "postid" + "}", encodeURIComponent(String(postid)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = common_1.serializeDataIfNeeded(postFinishedFlagRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         *
         * @summary Get single post
         * @param {string} postid id of post needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnePost: function (postid, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'postid' is not null or undefined
                    common_1.assertParamExists('getOnePost', 'postid', postid);
                    localVarPath = "/posts/{postid}"
                        .replace("{" + "postid" + "}", encodeURIComponent(String(postid)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         *
         * @summary Get posts
         * @param {number} [offset] The number of items to skip before starting to collect the result set
         * @param {number} [limit] The numbers of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts: function (offset, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/posts";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (offset !== undefined) {
                        localVarQueryParameter['offset'] = offset;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        }
    };
};
exports.PostsApiAxiosParamCreator = PostsApiAxiosParamCreator;
/**
 * PostsApi - functional programming interface
 * @export
 */
var PostsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.PostsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary add option group to post
         * @param {string} postid id of post needed
         * @param {OptionsGroupCreation} optionsGroupCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOptionsGroup: function (postid, optionsGroupCreation, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOptionsGroup(postid, optionsGroupCreation, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Create a new post
         * @param {PostCreationRequest} postCreationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: function (postCreationRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createPost(postCreationRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete one post
         * @param {string} postid id of post needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOnePost: function (postid, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteOnePost(postid, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary patch post
         * @param {string} postid id of post needed
         * @param {PostFinishedFlagRequest} postFinishedFlagRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagPostAsFinished: function (postid, postFinishedFlagRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flagPostAsFinished(postid, postFinishedFlagRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get single post
         * @param {string} postid id of post needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnePost: function (postid, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getOnePost(postid, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get posts
         * @param {number} [offset] The number of items to skip before starting to collect the result set
         * @param {number} [limit] The numbers of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts: function (offset, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPosts(offset, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.PostsApiFp = PostsApiFp;
/**
 * PostsApi - factory interface
 * @export
 */
var PostsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.PostsApiFp(configuration);
    return {
        /**
         *
         * @summary add option group to post
         * @param {string} postid id of post needed
         * @param {OptionsGroupCreation} optionsGroupCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOptionsGroup: function (postid, optionsGroupCreation, options) {
            return localVarFp.createOptionsGroup(postid, optionsGroupCreation, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Create a new post
         * @param {PostCreationRequest} postCreationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: function (postCreationRequest, options) {
            return localVarFp.createPost(postCreationRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete one post
         * @param {string} postid id of post needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOnePost: function (postid, options) {
            return localVarFp.deleteOnePost(postid, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary patch post
         * @param {string} postid id of post needed
         * @param {PostFinishedFlagRequest} postFinishedFlagRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagPostAsFinished: function (postid, postFinishedFlagRequest, options) {
            return localVarFp.flagPostAsFinished(postid, postFinishedFlagRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get single post
         * @param {string} postid id of post needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnePost: function (postid, options) {
            return localVarFp.getOnePost(postid, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get posts
         * @param {number} [offset] The number of items to skip before starting to collect the result set
         * @param {number} [limit] The numbers of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts: function (offset, limit, options) {
            return localVarFp.getPosts(offset, limit, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.PostsApiFactory = PostsApiFactory;
/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
var PostsApi = /** @class */ (function (_super) {
    __extends(PostsApi, _super);
    function PostsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary add option group to post
     * @param {string} postid id of post needed
     * @param {OptionsGroupCreation} optionsGroupCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.createOptionsGroup = function (postid, optionsGroupCreation, options) {
        var _this = this;
        return exports.PostsApiFp(this.configuration).createOptionsGroup(postid, optionsGroupCreation, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Create a new post
     * @param {PostCreationRequest} postCreationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.createPost = function (postCreationRequest, options) {
        var _this = this;
        return exports.PostsApiFp(this.configuration).createPost(postCreationRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete one post
     * @param {string} postid id of post needed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.deleteOnePost = function (postid, options) {
        var _this = this;
        return exports.PostsApiFp(this.configuration).deleteOnePost(postid, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary patch post
     * @param {string} postid id of post needed
     * @param {PostFinishedFlagRequest} postFinishedFlagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.flagPostAsFinished = function (postid, postFinishedFlagRequest, options) {
        var _this = this;
        return exports.PostsApiFp(this.configuration).flagPostAsFinished(postid, postFinishedFlagRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get single post
     * @param {string} postid id of post needed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.getOnePost = function (postid, options) {
        var _this = this;
        return exports.PostsApiFp(this.configuration).getOnePost(postid, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get posts
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.getPosts = function (offset, limit, options) {
        var _this = this;
        return exports.PostsApiFp(this.configuration).getPosts(offset, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PostsApi;
}(base_1.BaseAPI));
exports.PostsApi = PostsApi;
/**
 * VotesApi - axios parameter creator
 * @export
 */
var VotesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add vote
         * @param {string} optionid id of option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVote: function (optionid, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'optionid' is not null or undefined
                    common_1.assertParamExists('addVote', 'optionid', optionid);
                    localVarPath = "/votes/{optionid}"
                        .replace("{" + "optionid" + "}", encodeURIComponent(String(optionid)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: common_1.toPathString(localVarUrlObj),
                            options: localVarRequestOptions
                        }];
                });
            });
        }
    };
};
exports.VotesApiAxiosParamCreator = VotesApiAxiosParamCreator;
/**
 * VotesApi - functional programming interface
 * @export
 */
var VotesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.VotesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add vote
         * @param {string} optionid id of option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVote: function (optionid, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addVote(optionid, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.VotesApiFp = VotesApiFp;
/**
 * VotesApi - factory interface
 * @export
 */
var VotesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.VotesApiFp(configuration);
    return {
        /**
         *
         * @summary Add vote
         * @param {string} optionid id of option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVote: function (optionid, options) {
            return localVarFp.addVote(optionid, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.VotesApiFactory = VotesApiFactory;
/**
 * VotesApi - object-oriented interface
 * @export
 * @class VotesApi
 * @extends {BaseAPI}
 */
var VotesApi = /** @class */ (function (_super) {
    __extends(VotesApi, _super);
    function VotesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add vote
     * @param {string} optionid id of option
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VotesApi
     */
    VotesApi.prototype.addVote = function (optionid, options) {
        var _this = this;
        return exports.VotesApiFp(this.configuration).addVote(optionid, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return VotesApi;
}(base_1.BaseAPI));
exports.VotesApi = VotesApi;
